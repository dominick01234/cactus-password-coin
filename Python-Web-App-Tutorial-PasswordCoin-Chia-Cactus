Now we will create a web app that interfaces with our coin! This will be done by creating a python backend that connects to the Cactus blockchain.

Note that this is my first blockchain backed web app so I cannot say it will be following best practices. For instance, we will be directly connecting to a wallet over an RPC connection. How would this scale for an app that needs to connect to several different wallets while keeping the private keys safe?

Important : The password coin we will be using is not secure. It serves only as an introduction to writing Cactus smart coins. Please use test money (TXCH) on testnet only.
Create Python Driver Code

The driver code is the python script that will interface with the Cactuslisp module. To start, create a file called password/password_driver.py. See the full file in Github here.

We will have functions for each of the operations we performed manually in part 4.
Writing Pytests for our Cactus Smart Coin

To verify the driver code performs as intended, we can write a few unit tests. This is an important part of developing smart coins on Cactus since you don‚Äôt want to brick or lose real money on the blockchain. Writing tests is also an opportunity to try to consider different angles an attacker might take to steal your coin.

To create tests we can use the following commands from the main folder of our project:

cdv test ‚Äî-init

The command above, will create a tests folder and a tests/__init__.py and tests/test_skeleton.py.

Create a new file called tests/test_password.py. We can start this file by copying the auto-generated code in tests/test_skeleton.py but edit it so it contains the code below. Link to the Github version here.

The above test goes through the process of creating a coin with the password ‚Äòcactusiscool‚Äô, deploying it to a blockchain emulator and spending it.

We can get a list of all our tests using the command below.

cdv test --discover

And we can run our tests with this command below.

cdv test

If all goes well, all the tests should pass!
Creating the Web App

Now that we have our driver code and our tests, we can create a simple python Quart app to create and interact with our coin!

First install Quart.

pip install quart

Now create a file called app.py where we will write our HTTP request handlers for our web app. This file will have handlers for an index, coin creation and spending request. The full file for app.py can be found here.

Before going into the HTTP handlers let‚Äôs take a look at the code that connects to the blockchain. It will consist of the following:

    Two global variables to keep the handlers for the RPC connection wallet_rpc_client and full_node_rpc_client.
    A set of configuration variables that will keep the information required for our server to connect to the local instances of our wallet and full node (wallet_host, wallet_rpc_port, node_rpc_port).
    The function setup_blockchain_connection that will connect to the respective local service using the cactus Python library. For more information on the two functions used to create these connections see FullNodeRpcClient and WalletRpcClient.

The simplest of the HTTP handlers is the one for the index path shown below. It setups up a connection to the blockchain (using the RPC connection from the function above) and gets the balance of the first wallet in the local wallet to show to the user.

The handler for the /create path is shown below. Note that depending on the method POST vs GET a different part of the code executes. When creating a coin, it creates the coin address using the create_coin_txaddress driver and publishes the transaction with the wallet_rpc_client.send_transaction(wallet_id, int(amount), coin_txaddress) command.

The final handler is the /spend path. This handler is a little more complicated since it needs to accomplish a few different tasks:

    It gets the records for all coins that match the specified puzzle hash (full_node_rpc_client.get_coin_records_by_puzzle_hash).
    Checks the spend state of each of the retrieved coins to find a coin that has not been spent. Note: Since we are looking up the function by puzzle_hash every single coin created with this puzzle and the same input password will be returned! Even coins created by other users. Possibly not the best implementation.
    It creates a spend bundle.
    Submits the spend bundle to the network (full_node_rpc_client.push_tx(tx_spend_bundle)).

Now that we have created our HTTP handler we need to create the HTML template that will be used for each of the views. Each of our four templates are shown below:

/templates/base.html

/templates/create.html

/templates/index.html

/templates/spend.html

The full code can found in the repository below.
GitHub - Kygandomi/cactus-password-coin: Project for learning cactus lisp using the official cactus‚Ä¶
In this project, we develop a simple password protected Smart Coin using Cactuslisp ! Since the Cactus development‚Ä¶

github.com
Running the Web App

Use the command below to run the webapp. Note: Your Cactus client (wallet + full node) need to be running locally and synced.

python app.py

Open a browser and navigate to the index of our application as shown below. It should show the current confirmed balance in your local wallet.

We can now create our first coin by navigating to /create and input the desired amount of mojos and a password!

Upon clicking submit, the transaction should appear on your wallet‚Äôs history as shown below. It may take a while to commit.

Once the transaction is committed you are able to spend it in the /spend path of the application by entering the password and the address to forward the proceeds to. In this case, my original wallet‚Äôs receive address.

After some time, the incoming transaction should appear in your wallet‚Äôs history completing the round trip of creating a password protected coin and cashing it back to the original wallet!
Conclusion

That is it! Throughout this series we went over the basic concepts of Cactuslisp, we then setup a development environment for creating test coins, we wrote our first coin puzzle and then deployed it to the blockchain. In this final part, we learnt how to programmatically use our puzzle via a custom Python web app.

Hope this was helpful! I sure learnt a lot from this experience. And feel free to drop a link of what you are working on in the comments!

Co-authored by Dr. Katie Gandomi

If you found this article helpful feel free to hit the üëè button or donate some (mainnet) Cactus (XCH) to my address:

xch159qvpvafcx4jxllk9xe9nph42xw50j56mpt03dsa05svll7kmdlq04ucm8


